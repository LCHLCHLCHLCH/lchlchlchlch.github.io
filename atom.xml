<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LCH</title>
  
  
  <link href="http://lchlchlchlch.github.io/atom.xml" rel="self"/>
  
  <link href="http://lchlchlchlch.github.io/"/>
  <updated>2024-06-20T12:58:49.113Z</updated>
  <id>http://lchlchlchlch.github.io/</id>
  
  <author>
    <name>LCH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Verilog实现在某个信号的上升沿激活另一个信号一段时间</title>
    <link href="http://lchlchlchlch.github.io/2024/06/20/Verilog%E5%AE%9E%E7%8E%B0%E5%9C%A8%E6%9F%90%E4%B8%AA%E4%BF%A1%E5%8F%B7%E7%9A%84%E4%B8%8A%E5%8D%87%E6%B2%BF%E6%BF%80%E6%B4%BB%E5%8F%A6%E4%B8%80%E4%B8%AA%E4%BF%A1%E5%8F%B7%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4/"/>
    <id>http://lchlchlchlch.github.io/2024/06/20/Verilog%E5%AE%9E%E7%8E%B0%E5%9C%A8%E6%9F%90%E4%B8%AA%E4%BF%A1%E5%8F%B7%E7%9A%84%E4%B8%8A%E5%8D%87%E6%B2%BF%E6%BF%80%E6%B4%BB%E5%8F%A6%E4%B8%80%E4%B8%AA%E4%BF%A1%E5%8F%B7%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4/</id>
    <published>2024-06-20T12:58:23.000Z</published>
    <updated>2024-06-20T12:58:49.113Z</updated>
    
    <content type="html"><![CDATA[<h4 id="今天在写Verilog代码的时候遇到了一个棘手的问题。"><a href="#今天在写Verilog代码的时候遇到了一个棘手的问题。" class="headerlink" title="今天在写Verilog代码的时候遇到了一个棘手的问题。"></a>今天在写Verilog代码的时候遇到了一个棘手的问题。</h4><p>我想要实现的目标是：在一个sensor信号上升时，激活一个复位信号rst_light。但是又不能让它一直保持激活状态，必须让它在激活一小段时间后再变为未激活的状态。波形图大概是长这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">                         __________________________</span><br><span class="line">sensor     _____________|  </span><br><span class="line">                          __</span><br><span class="line">rst_light  ______________|  |_______________________</span><br></pre></td></tr></table></figure><p>尝试上网查询，但是没有合适的解决方法<br>又尝试去问AI，但是AI给的答复，会让rst_light在sensor激活后一直保持激活的状态。从而使得它对应的模块无法正常工作。总之就是没有解决问题。</p><p>后来我想到了用这样的方式解决：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sensor) rst_light &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk)</span><br><span class="line">    <span class="keyword">if</span>(rst_light == <span class="number">1&#x27;b1</span>)</span><br><span class="line">        rst_light &lt;= <span class="number">1&#x27;b0</span>;</span><br></pre></td></tr></table></figure><p>这种方式从逻辑上行得通，但是出现了两个always语句一起对rst_light赋值的问题。综合的时候会报错。</p><p>经过我一天的思考，终于找到了这个方法：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> sensor_mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> sys_clk) sensor_mid &lt;= ~sensor;</span><br><span class="line"><span class="keyword">assign</span> rst_light = sensor_mid &amp;&amp; sensor;</span><br></pre></td></tr></table></figure><p>这个方法使用了一个中间变量sensor_mid，它是sensor延迟再取反得到的。这样就能使得sensor和sensor_mid中间产生一点空隙，而这点空隙正好能为rst_clk信号提供一小段存在的时间。从而解决了问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;今天在写Verilog代码的时候遇到了一个棘手的问题。&quot;&gt;&lt;a href=&quot;#今天在写Verilog代码的时候遇到了一个棘手的问题。&quot; class=&quot;headerlink&quot; title=&quot;今天在写Verilog代码的时候遇到了一个棘手的问题。&quot;&gt;&lt;/a&gt;今天在写V</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用vscode+armgcc+openocd构建stm32开发环境</title>
    <link href="http://lchlchlchlch.github.io/2024/06/20/%E4%BD%BF%E7%94%A8vscode-armgcc-openocd%E6%9E%84%E5%BB%BAstm32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://lchlchlchlch.github.io/2024/06/20/%E4%BD%BF%E7%94%A8vscode-armgcc-openocd%E6%9E%84%E5%BB%BAstm32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2024-06-20T12:52:45.000Z</published>
    <updated>2024-06-20T12:54:39.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文介绍了如何搭建用于stm32开发的环境。本环境在ubuntu下测试通过，理论上经过简单修改就可以用于其他linux发行版。注意该方法的某些步骤在Windows下和linux有一定差别。建议windows用户使用keil。</p><h1 id="本文的目标"><a href="#本文的目标" class="headerlink" title="本文的目标"></a>本文的目标</h1><p>在vscode中实现代码补全，使用vscode的task功能实现（较为）简便的烧录。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>安装必要工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-arm-none-eabi gcc build-essential cmake telnet</span><br></pre></td></tr></table></figure><p>自行下载vscode和cubeMX.在vscode中安装C语言插件C&#x2F;C++ Extension Pack.</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="代码补全等设置"><a href="#代码补全等设置" class="headerlink" title="代码补全等设置"></a>代码补全等设置</h1><p>使用vscode打开cebeMX生成的代码会发现出现大量的红线报错且某些代码无法补全（如GPIOx），这是由于适用于vscode的包含路径和宏定义没有定义好。解决方法如下：</p><ol><li>在工作目录下新建一个文件夹，命名为”.vscode”(注意前面有一个点)</li><li>进入该目录，新建一个文件名为”c_cpp_properties.json”</li><li>拷贝以下内容：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;./Core/Inc&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;./Drivers/CMSIS/Include&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;./Drivers/CMSIS/Device/ST/STM32F1xx/Include&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;./Drivers/STM32F1xx_HAL_Driver/Inc&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;./Drivers/STM32F1xx_HAL_Driver/Inc/Legacy&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;STM32F103xB&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;USE_HAL_DRIVER&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>解释：</li><li>name:项目的名字，自行修改</li><li>includePath：包含路径，要确保以下列出的路径要包含项目中所有的头文件。如果出现黄色波浪线报错需要根据自己的目录修改。</li><li>defines:项目的全局宏定义。需要根据自己的项目进行修改</li></ol><h1 id="cubeMX配置项目"><a href="#cubeMX配置项目" class="headerlink" title="cubeMX配置项目"></a>cubeMX配置项目</h1><p>这里没什么特别要说的。只要注意project manager选项卡的Tool  chain要选择cmake即可。</p><h1 id="代码编译"><a href="#代码编译" class="headerlink" title="代码编译"></a>代码编译</h1><ol><li>在项目目录下新建一个build文件夹并进入：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure></li><li>执行cmake：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake ..</span><br></pre></td></tr></table></figure></li><li>执行make<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line"><span class="comment">#如果您的电脑有多个处理器核的话也可以执行下面的命令以增快编译速度</span></span><br><span class="line"><span class="comment">#make -j14</span></span><br></pre></td></tr></table></figure></li></ol><p>说明：执行cmake命令的时候cmake根据目录中的CMakeLists.txt 生成makefile，执行make时make程序执行编译和链接过程。因此当项目机构变动的时候需要重新执行cmake更行makefile;修改源代码之后只需要重新执行make即可。  </p><p>进入build文件夹，{项目名}.elf 即为构建出的文件，在本例中为test.elf.以下我们将使用openocd将该文件烧录到单片机中。</p><p>cmake和make命令的执行也可以使用vscode的tasks来一键完成。但是由于这两个指令非常短，所以我个人也觉得没有必要。如果有人想做的话可以参考本文的“使用openocd烧录”部分的第二小节“使用vscode的task”。</p><h1 id="使用openocd烧录"><a href="#使用openocd烧录" class="headerlink" title="使用openocd烧录"></a>使用openocd烧录</h1><h2 id="手操方法"><a href="#手操方法" class="headerlink" title="手操方法"></a>手操方法</h2><p>概述：首先通过openocd与下载器建立连接，再通过telnet将程序文件发送过去。注意本部分略微繁琐且并不绝对必要，如果想直达结果可以跳到下一小节“使用vscode的task”。</p><ol><li><p>打开一个终端，输入一下指令连接daplink：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openocd -f interface/cmsis-dap.cfg -f target/stm32f1x.cfg</span><br></pre></td></tr></table></figure><p>这样只是实现了建立连接而并没有实现发送等操作。</p></li><li><p>不要关闭上一个终端，也不要退出。打开一个新的终端并执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入build文件夹</span></span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="comment"># 执行telnet命令连接openocd</span></span><br><span class="line">telnet 127.0.0.1 4444</span><br></pre></td></tr></table></figure><p>正确执行该指令后您应该看到”Open On Chip Debugger&gt;”之类的字样。<br>在telnet的终端中执行一下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">program test.elf</span><br></pre></td></tr></table></figure><p>观察单片机上是否出现了符合代码的现象。</p></li></ol><h2 id="使用vscode的task"><a href="#使用vscode的task" class="headerlink" title="使用vscode的task"></a>使用vscode的task</h2><p>到上一部时，整个编译烧录的过程就已经可以实现了。但是美中不足的是最后烧录的一步需要敲打的指令太多，并不简便。因此借助vscode的task来简化这一步。</p><p>首先进入.vscode文件夹并新建一个文件tasks.json。添加以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openocd烧录&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openocd&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;-f&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;interface/cmsis-dap.cfg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;-f&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;target/stm32f1x.cfg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;-c&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;init&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;-c&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;halt&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;-c&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;program $&#123;workspaceFolder&#125;/build/test.elf&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>说明：command后面是可执行文件。一般来说使用包管理器安装openocd后就会自动加入环境变量，所以这里直接写可执行文件的名字就可以。如果没有的话也可以在这里填写完整的绝对路径。  </p><p>args后面是可执行文件的参数。如果要将该tasks.json移植到其他项目里，需要修改”cmsis-dap.cfg” “stm32f1x.cfg” “test.elf”三处地方。  </p><p>因此，上述指令也等效于下面一个指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openocd -f interface/cmsis-dap.cfg -f target/stm32f1x.cfg -c init -c halt -c <span class="string">&#x27;program ./build/test.elf&#x27;</span></span><br></pre></td></tr></table></figure><p>label后面的是该任务的名字，可以随意修改。</p><p>在完成以上设置以后，若要再执行烧录，可以在vscode中按Ctrl+Shift+P打开命令界面，输入task,找到Tasks: Run Task, 在打开的界面选择“openocd烧录”（或者是您修改过的任务名。）即可完成烧录。  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文介绍了如何搭建用于stm32开发的环境。本环境在ubuntu下测试通过，理论上经过简单修改就可以用于其他linux发行版。注意该方法的某</summary>
      
    
    
    
    
  </entry>
  
</feed>
